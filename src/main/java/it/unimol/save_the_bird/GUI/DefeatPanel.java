package it.unimol.save_the_bird.GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import it.unimol.save_the_bird.Exceptions.EmptyStringException;
import it.unimol.save_the_bird.application.FileReader;
import it.unimol.save_the_bird.application.FileWriter;
import it.unimol.save_the_bird.application.InterfaceHandler;
import it.unimol.save_the_bird.application.User;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class DefeatPanel {
    private JPanel defeatPanel;
    private JButton try_againButton;
    private JButton exitButton;
    private JButton visualizza_classificaButton;
    public JButton saveButton;
    public JLabel timerLabel;

    public InterfaceHandler change_interface;
    private List<User> results = new ArrayList<User>();
    private List<User> users = new ArrayList<User>();

    private FileReader fileReader = FileReader.getInstance();
    private FileWriter fileWriter = FileWriter.getInstance();

    private File file_last_user = new File("Last_User.txt");
    private File file_results = new File("Result.txt");


    public DefeatPanel(InterfaceHandler change_interface) {
        this.change_interface = change_interface;
        results = fileReader.readFile(results, file_results);
        users = fileReader.readFile(results, file_last_user);


        timerLabel.setText("Il tuo tempo di sopravvivenza Ã¨ stato: " + users.get(0).getSurvival_time());


        try_againButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                change_interface.choise(3);
            }
        });
        visualizza_classificaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                change_interface.choise(4);
            }
        });
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                assert users.get(0) != null;
                assert users.get(0).getUsername() == null;

                while (users.get(0).getUsername() == null) {
                    try {
                        users.get(0).setUsername(JOptionPane.showInputDialog("Inserisci il tuo nome"));
                        results.add(users.get(0));
                        fileWriter.writeFile(results, "Result.txt");
                        saveButton.setEnabled(false);
                    } catch (EmptyStringException e1) {
                        JOptionPane.showMessageDialog(null, e1.getMessage());
                    }
                }
            }
        });
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
    }

    public JPanel getDefeat_panel() {
        return defeatPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        defeatPanel = new JPanel();
        defeatPanel.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        defeatPanel.setBackground(new Color(-1896448));
        final JLabel label1 = new JLabel();
        label1.setBackground(new Color(-1896448));
        Font label1Font = this.$$$getFont$$$("Bauhaus 93", -1, 72, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("GAME OVER");
        defeatPanel.add(label1, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setText("ESCI");
        defeatPanel.add(exitButton, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        visualizza_classificaButton = new JButton();
        visualizza_classificaButton.setText("VISUALIZZA CLASSIFICA");
        defeatPanel.add(visualizza_classificaButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        try_againButton = new JButton();
        Font try_againButtonFont = this.$$$getFont$$$(null, -1, -1, try_againButton.getFont());
        if (try_againButtonFont != null) try_againButton.setFont(try_againButtonFont);
        try_againButton.setText("RIPROVA");
        defeatPanel.add(try_againButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setText("SALVA");
        defeatPanel.add(saveButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        timerLabel = new JLabel();
        Font timerLabelFont = this.$$$getFont$$$(null, -1, 36, timerLabel.getFont());
        if (timerLabelFont != null) timerLabel.setFont(timerLabelFont);
        timerLabel.setText("Label");
        defeatPanel.add(timerLabel, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return defeatPanel;
    }

}
